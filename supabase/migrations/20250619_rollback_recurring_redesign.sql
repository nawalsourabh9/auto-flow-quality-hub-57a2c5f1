-- ROLLBACK MIGRATION: Revert recurring task system redesign
-- Date: 2025-06-19
-- This migration reverts the changes made in 20250618_recurring_task_redesign.sql

-- WARNING: This will lose all template/instance data structure!
-- Make sure to backup your data before running this rollback.

-- Part 1: Backup current data (optional - run this first to save current state)
-- CREATE TABLE tasks_backup_20250619 AS SELECT * FROM tasks;
-- CREATE TABLE recurring_naming_rules_backup_20250619 AS SELECT * FROM recurring_naming_rules;

-- Part 2: Convert templates back to regular recurring tasks
DO $$
DECLARE
    template_record RECORD;
    latest_instance RECORD;
BEGIN
    -- For each template, find its latest completed instance and restore template data
    FOR template_record IN
        SELECT * FROM tasks WHERE is_template = TRUE
    LOOP
        -- Find the latest instance for this template
        SELECT * INTO latest_instance
        FROM tasks 
        WHERE parent_task_id = template_record.id 
          AND is_template = FALSE
        ORDER BY due_date DESC, created_at DESC
        LIMIT 1;
        
        IF FOUND THEN
            -- Update template with latest instance data to restore functionality
            UPDATE tasks 
            SET 
                due_date = latest_instance.due_date,
                status = latest_instance.status,
                is_template = FALSE,
                updated_at = NOW()
            WHERE id = template_record.id;
        ELSE
            -- No instances found, set template as not-started with current date
            UPDATE tasks 
            SET 
                due_date = CURRENT_DATE,
                status = 'not-started',
                is_template = FALSE,
                updated_at = NOW()
            WHERE id = template_record.id;
        END IF;
    END LOOP;
END;
$$;

-- Part 3: Delete all instances (they will be regenerated by old system)
DELETE FROM tasks WHERE parent_task_id IS NOT NULL AND is_template = FALSE;

-- Part 4: Drop new columns
ALTER TABLE tasks 
DROP COLUMN IF EXISTS is_template,
DROP COLUMN IF EXISTS is_generated;

-- Part 5: Restore NOT NULL constraints
UPDATE tasks SET due_date = CURRENT_DATE WHERE due_date IS NULL;
UPDATE tasks SET status = 'not-started' WHERE status IS NULL;

ALTER TABLE tasks 
ALTER COLUMN due_date SET NOT NULL,
ALTER COLUMN status SET NOT NULL;

-- Part 6: Drop new functions
DROP FUNCTION IF EXISTS complete_task_and_generate_next(UUID);
DROP FUNCTION IF EXISTS mark_tasks_overdue_simple();
DROP FUNCTION IF EXISTS create_first_recurring_instance(UUID);
DROP FUNCTION IF EXISTS calculate_recurring_counter(UUID, TEXT, DATE);
DROP FUNCTION IF EXISTS generate_instance_name(TEXT, TEXT, DATE);
DROP FUNCTION IF EXISTS update_template_name_cascade(UUID, TEXT);
DROP FUNCTION IF EXISTS get_month_abbrev(DATE);
DROP FUNCTION IF EXISTS update_updated_at_column();

-- Part 7: Drop new table
DROP TABLE IF EXISTS recurring_naming_rules;

-- Part 8: Drop new indexes
DROP INDEX IF EXISTS idx_tasks_is_template;
DROP INDEX IF EXISTS idx_tasks_is_generated;
DROP INDEX IF EXISTS idx_tasks_recurring_freq;

-- Part 9: Drop trigger
DROP TRIGGER IF EXISTS update_tasks_updated_at ON tasks;

-- Part 10: Drop updated_at column if it was added by the migration
-- ALTER TABLE tasks DROP COLUMN IF EXISTS updated_at; -- Uncomment if you want to remove this

-- Verification
SELECT 'Rollback completed successfully!' as status;
SELECT 'All templates converted back to regular recurring tasks' as note;
